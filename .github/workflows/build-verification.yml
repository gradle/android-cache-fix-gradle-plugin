name: Verify Build

on:
  push:
    branches: [ main, citest ]
  pull_request:
  workflow_dispatch:

jobs:
  generate_versions:
    name: Generate versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: setup-matrix
        run: echo "matrix=$(jq -cM '.supportedVersions | keys' src/main/resources/versions.json | sed -e 's/\./_/g' -e 's/-/_/g')" >> $GITHUB_OUTPUT
      - name: debug
        run: echo "matrix=${{ steps.setup-matrix.outputs.matrix }}"
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

  sanity_check:
    name: Sanity check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3
      - name: Run sanityCheck
        run: ./gradlew sanityCheck -Porg.gradle.java.installations.auto-download=false
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_SOLUTIONS_ACCESS_TOKEN }}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3
      - name: Run unit tests
        run: >-
            ./gradlew test
            -x signPluginMavenPublication
            -x signAndroidCacheFixPluginPluginMarkerMavenPublication
            -Porg.gradle.java.installations.auto-download=false
            -Dpts.mode=$PTS_MODE
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_SOLUTIONS_ACCESS_TOKEN }}
          PTS_MODE: "${{ github.ref_name == 'main' && 'REMAINING_TESTS' || 'RELEVANT_TESTS' }}"

  android_version_tests:
    name: Android version tests
    needs: [ generate_versions, sanity_check ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        versions: ${{ fromJson(needs.generate_versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: List Android Packages
        run: sudo ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --list | sed -n '/Available Packages/q;p'
      - name: Accept license 34.0.0
        run: echo "y" | sudo ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
      - name: Setup ZULU_JDK
        uses: actions/setup-java@v4
        with:
          java-version: 11.0.12
          distribution: 'zulu'
      - name: Set ZULU_JDK environment variable
        run: |
          echo "ZULU_JDK=$JAVA_HOME" >> $GITHUB_ENV
      - name: Setup ZULU_ALT_JDK
        uses: actions/setup-java@v4
        with:
          java-version: 11.0.13
          distribution: 'zulu'
      - name: Set ZULU_ALT_JDK environment variable
        run: |
          echo "ZULU_ALT_JDK=$JAVA_HOME" >> $GITHUB_ENV
      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3
      - name: Run integration tests
        run: >-
            ./gradlew testAndroid${{ matrix.versions }}
            -x signPluginMavenPublication
            -x signAndroidCacheFixPluginPluginMarkerMavenPublication
            -Porg.gradle.java.installations.auto-download=false
            -Dpts.mode=$PTS_MODE
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_SOLUTIONS_ACCESS_TOKEN }}
          PTS_MODE: "${{ github.ref_name == 'main' && 'REMAINING_TESTS' || 'RELEVANT_TESTS' }}"
