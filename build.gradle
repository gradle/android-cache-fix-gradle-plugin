plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
    id 'codenarc'
    id "com.gradle.plugin-publish" version "0.20.0"
    id "org.gradle.test-retry" version "1.3.1"
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'org.gradle.android.plugin'
}

group = "org.gradle.android"
version = layout.projectDirectory.file("release/version.txt").asFile.text.trim()

def isCI = (System.getenv('CI') ?: 'false').toBoolean()

androidVersions {
    '7.2.0-beta02' {
        gradleVersions = ['7.3.3']
    }
    '7.1.2' {
        gradleVersions = ['7.3.3']
    }
    '7.0.4' {
        gradleVersions = ['7.3.3']
    }
}

repositories {
    google()
    mavenCentral()
}

configurations {
    groovyClasspath
}

dependencies {
    def versions = [
        'agp'  : '7.0.4',
        'spock': '2.1-groovy-3.0'
    ]

    // Used for compiling the main classes
    groovyClasspath 'org.codehaus.groovy:groovy-all:2.5.12'

    compileOnly "com.android.tools.build:gradle:${versions.agp}"
    implementation("com.google.guava:guava:31.0.1-jre")

    implementation gradleApi()

    testImplementation gradleTestKit()
    testImplementation "com.android.tools.build:gradle:${versions.agp}"
    testImplementation platform("org.spockframework:spock-bom:${versions.spock}")
    testImplementation("org.spockframework:spock-core") { exclude group: 'org.codehaus.groovy' }
    testImplementation("org.spockframework:spock-junit4") { exclude group: 'org.codehaus.groovy' }
    testImplementation "org.junit.jupiter:junit-jupiter-api"
}

java {
    toolchain {
        // AGP 7+ only supports JDK 11+
        languageVersion = JavaLanguageVersion.of(11)
    }
}

// We do this only for the the main source set as the test source set needs to use
// Groovy 3 for Spock 2.0 compatibility.  The main classes need to be compiled with
// Groovy 2 so that they will work with older versions of Gradle.
tasks.named('compileGroovy').configure {
    groovyClasspath = configurations.groovyClasspath
}

// Main plugin publishing metadata
gradlePlugin {
    plugins {
        androidCacheFixPlugin {
            id = 'org.gradle.android.cache-fix'
            displayName = 'Gradle Android cache fix plugin'
            description = 'Gradle plugin to fix Android caching problems'
            implementationClass = 'org.gradle.android.AndroidCacheFixPlugin'
        }
    }
}

def isProdPortal = !System.getProperty('gradle.portal.url')
pluginBundle {
    website = 'https://github.com/gradle/android-cache-fix-gradle-plugin'
    vcsUrl = 'https://github.com/gradle/android-cache-fix-gradle-plugin'

    tags = ['android', 'cache', 'fix']

    // The legacy groupId gradle.plugin.* is only allowed when the plugin
    // has already been published
    if (isProdPortal) {
        mavenCoordinates {
            groupId = "gradle.plugin.org.gradle.android"
        }
    }
}

// A local repo we publish our library to for testing in order to workaround limitations
// in the TestKit plugin classpath.
def localRepo = file("$buildDir/local-repo")
publishing {
    repositories {
        maven {
            url = localRepo.toURI()
        }
    }
}

// Configuration common to all test tasks
tasks.withType(Test).configureEach {
    dependsOn publish
    workingDir projectDir
    systemProperty "local.repo", projectDir.toPath().relativize(localRepo.toPath()).toString()
    useJUnitPlatform()
    retry {
        maxRetries = isCI ? 1 : 0
        maxFailures = 20
    }
}

// A basic sanity check to run before running all test tasks
tasks.register("sanityCheck") {
    dependsOn tasks.withType(CodeNarc), validatePlugins
}

tasks.withType(ValidatePlugins).configureEach {
    failOnWarning = true
    enableStricterValidation = true
}

signing {
    // Require publications to be signed on CI. Otherwise, publication will be signed only if keys are provided.
    required isCI

    useInMemoryPgpKeys(
        providers.environmentVariable("PGP_SIGNING_KEY").forUseAtConfigurationTime().orNull,
        providers.environmentVariable("PGP_SIGNING_KEY_PASSPHRASE").forUseAtConfigurationTime().orNull)

    sign(configurations.archives)
}

githubRelease {
   token = System.getenv("ANDROID_CACHE_FIX_PLUGIN_GIT_TOKEN") ?: ''
   owner = "gradle"
   repo = "android-cache-fix-gradle-plugin"
   releaseName = gitHubReleaseName()
   tagName = gitReleaseTag()
   prerelease = false
   overwrite = false
   body = layout.projectDirectory.file("release/changes.md").asFile.text.trim()
}

tasks.register('createReleaseTag', CreateGitTag) {
    tagName = gitReleaseTag()
}

tasks.named("githubRelease") {
    dependsOn("createReleaseTag")
}

def gitHubReleaseName() {
    return version.toString()
}

def gitReleaseTag() {
    return "v${version}"
}
